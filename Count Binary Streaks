/* Get number of occurences of a substring in a string. Mostly used by bot for counting binary streaks */
function occurrences(string, subString, allowOverlapping=1) {

    string += "";
    subString += "";
    if (subString.length <= 0) return (string.length + 1);

    var n = 0,
        pos = 0,
        step = allowOverlapping ? 1 : subString.length;

    while (true) {
        pos = string.indexOf(subString, pos);
        if (pos >= 0) {
            ++n;
            pos += step;
        } else break;
    }
    return n;
}

// returns object with array for streaks of 1 and array for streaks of 0
// each cell is numbered as the streak length, and the value is the total number of those streaks found
// ex: 100110110111 has 
// 1 streaks: OneStreaks[1]=1,OneStreaks[2]=2,OneStreaks[3]=1 
// 0 streaks: ZeroStreaks[1]=2,ZeroStreaks[2]=1
function get_binaryStreaks(binaryString,maxStreak=128) {
	let ZeroStreaks = [binaryString.length];
	let OneStreaks = [binaryString.length];
	let maxZero=0; // the longest streak of 0's
	let maxOne=0; // the longest streak of 1's
	let oneMedian=[]; // used to find median
	let zeroMedian=[]; //  used to find median

	let oneAverage=0; // used to find average
	let zeroAverage=0; //  used to find average

	for (var iz = 1; iz <= maxStreak; iz++) {
		let cstreakone = '0' + ('1'.repeat(iz)) + '0';
		let cstreak = '1' + ('0'.repeat(iz)) + '1';
		if (binaryString.search(cstreak) >= 0){
			ZeroStreaks[iz] = occurrences(binaryString, cstreak,1) ;
			maxZero=iz;
			for (var m=1; m<=ZeroStreaks[iz]; m++){
				zeroMedian.push(iz);
			}
		} else {
			ZeroStreaks[iz]=0;
	    }

		if (binaryString.search(cstreakone) >= 0 ){
			OneStreaks[iz] = occurrences(binaryString, cstreakone,1);
			maxOne=iz;
			for (var m=1; m<=ZeroStreaks[iz]; m++){
				oneMedian.push(iz);
			}
		} else {
			OneStreaks[iz]=0;
		}
	}
	let oneMed=oneMedian[Math.floor(oneMedian.length/2)];
	let zeroMed=zeroMedian[Math.floor(zeroMedian.length/2)];
	let omLength=oneMedian.length;
	let zmLength=zeroMedian.length;

	oneAverage=((oneMedian.reduce((a,b)=>a+b))/omLength);
	zeroAverage=((zeroMedian.reduce((a,b)=>a+b))/zmLength);
	let result = {
		'zeroStreaks': ZeroStreaks,
		'oneStreaks': OneStreaks,
		'zeroMax': maxZero,
		'oneMax': maxOne,
		'zeroMedian': zeroMed,
		'oneMedian': oneMed,
		'zeroAverage': zeroAverage,
		'oneAverage': oneAverage
	};

	return result
}
